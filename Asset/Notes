* Customized Colors:

(Light Gray)
UIColor(red: 234/255, green: 234/255, blue: 234/255, alpha: 1)

(Light Blue)
UIColor(red: 51/255, green: 127/255, blue: 159/255, alpha: 1)
hex : #337F9F

* Templates:

LabelViewModel

LabelViewModel(text: "HELLO",
               textColor: ColorCardViewModel(redValue: 51,
                                             greenValue: 127,
                                             blueValue: 159,
                                             alphaValue: 1),
               numberOfLines: 1,
               borderColor: ColorCardViewModel(redValue: 234,
                                               greenValue: 234,
                                               blueValue: 234,
                                               alphaValue: 1),
               borderWidth: 2,
               size: CGSize(width: 200, height: 200),
               style: LabelViewModel.Style.truncate,
              textAlignment: LabelViewModel.TextAlignment.right)

let colorCardViewModel = ColorCardViewModel(redValue: 0,
                                            greenValue: 0,
                                            blueValue: 255,
                                            alphaValue: 1,
                                            isSelected: true,
                                            id: "",
                                            size: CGSize(width: 50,
                                                         height: 50))
*NOTES*

    * when two transitions change to the same state, or change from the same state, the state itself is not sufficient, so check for the transition. So
    rely on the oldState or newState.

    InputViewModel

    edit Inactive -> Active
    submit Active -> Inactive
    cancel Active -> Inactive

    * One example is in the DropFormController

    Pass in the viewModel to pass the size, the size is stored in each viewModel.

    Use the pageViewController size because 1. It's the same size as the main controller's size. 2. make the smaller views scale to the pageView since it's on the pageView's view, which is the firstPageController.

    * Manually moved confirm button in ThirdPageController into view, as well as the textFieldInput. Only a temporary solution, make sure to fix it by getting the height of the keyboard.

    *Play around with KVO, addObserver

*Practiced with writing and reading from file system, specifically the url address.
// Create url, write something

//        let fileManager = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0].appendingPathComponent("test").path
//        let url = URL(fileURLWithPath: fileManager)
//
//        let jsonEncoder = JSONEncoder()
//        let jsonData = try? jsonEncoder.encode(viewModel)
//
//        try? jsonData?.write(to: url)
//
// Then comment out the above code, and write code to retrieve

//        let fileManager = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0].appendingPathComponent("test").path
//        let url = URL(fileURLWithPath: fileManager)
//
//        let data = try! Data(contentsOf: url)
//        let jsonDecoder = try? JSONDecoder().decode(EmployeeViewModel.self, from: data)
//        print(jsonDecoder, "AAAAAAA")


"question" : "Disclaimer/Terms of Use",
"answer" : "My Cataract App does not collect any information from the user. Especially, no personal, location, compliance, or medical information is collected. My Cataract App is a tool to help patients remember their drops, remind them of appointments, and orangize important information. It is not a substitute for medical care and does not replace important interactions between a patient and surgeon. Questions about your care should always be addressed by your eye surgeon who knows you and your medical history. Unauthorized reproduction is strictly prohibited. My Cataract App does not bear any responsibility for loss or damages related to the use or misuse of this application."
